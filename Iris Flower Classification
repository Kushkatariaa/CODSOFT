import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load the Iris Dataset
df = pd.read_csv('/content/IRIS.csv')

# Extract features and target from the DataFrame
X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']] # Features
y = df['species'].astype('category').cat.codes  # Target Labels (converted to numerical)

# Display first few rows
df.head()

# Step 3: Data Preprocessing
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 4: Train the KNN Classifier
k = 5  
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)

# Step 5: Evaluate the Model
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of KNN Classifier with k={k}: {accuracy * 100:.2f}%")

# Confusion Matrix
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Get target names from the DataFrame
target_names = df['species'].unique()

sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=target_names, yticklabels=target_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

# Step 6: Make Predictions
sample = np.array([[5.1, 3.5, 1.4, 0.2]])  
sample_scaled = scaler.transform(sample)
prediction = knn.predict(sample_scaled)

# Get predicted species name
predicted_species = target_names[prediction][0]
print(f"Predicted species for the input sample: {predicted_species}")
